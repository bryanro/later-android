/**
 * Can use the following to perform a debug or release:
 * > gradle debug
 * > gradle release
 *
 * debug will run assembleDebug
 * release will run assembleRelease, configure the signing using the signing.properties file, and increment the build number automatically
 *
 */


import java.util.regex.Pattern

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}
apply plugin: 'android'
apply plugin: 'crashlytics'

repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }

}

android {
    compileSdkVersion 18
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 18
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {
        }
    }
}

dependencies {
    compile files('libs/libGoogleAnalyticsServices.jar')
    compile 'com.crashlytics.android:crashlytics:1.+'
    compile 'com.android.support:appcompat-v7:19.+'
}

/**
 * Setup release signing by reading signing.properties file, which has key/value pairs for:
 *  KEYSTORE_FILE
 *  KEYSTORE_PASSWORD
 *  KEY_ALIAS
 *  KEY_PASSWORD
 */
def Properties props = new Properties()
def propFile = new File("signing.properties")
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null
            && props.containsKey("KEYSTORE_FILE")
            && props.containsKey("KEYSTORE_PASSWORD")
            && props.containsKey("KEY_ALIAS")
            && props.containsKey("KEY_PASSWORD")) {

        def keystoreFile = new File(props["KEYSTORE_FILE"])
        if (keystoreFile.canRead()) {
            android.signingConfigs.release.storeFile = keystoreFile
            android.signingConfigs.release.storePassword = props["KEYSTORE_PASSWORD"]
            android.signingConfigs.release.keyAlias = props["KEY_ALIAS"]
            android.signingConfigs.release.keyPassword = props["KEY_PASSWORD"]
        } else {
            println("keystore file not found: " + props["KEYSTORE_FILE"])
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println("signing.properties found but some entries missing")
        android.buildTypes.release.signingConfig = null
    }
} else {
    println("signing.properties not found")
    android.buildTypes.release.signingConfig = null
}

/**
 * Takes the existing versionCode in AndroidManifest.xml and increments it for the next release
 * Example:
 *   1) Before the build the AndroidManfist.xml has versionCode=7
 *   2) The AndroidManifest.xml will be modified so that versionCode=8
 */

task incrementVersionCode << {
    println(":incrementVersionCode - Incrementing Version Code...")
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionCode = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionCode = patternVersionCode.matcher(manifestText)
    matcherVersionCode.find()
    def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
    def mNextVersionCode = mVersionCode + 1
    def manifestContent = matcherVersionCode.replaceAll("versionCode=\"" + mNextVersionCode + "\"")
    println(":incrementVersionCode - current versionCode=" + mVersionCode);
    println(":incrementVersionCode - next versionCode=" + mNextVersionCode);
    manifestFile.write(manifestContent)
}

/**
 * Takes the existing versionName in AndroidManifest.xml and increments the point number for the next release
 * The AndroidManifest.xml file's versionName needs to be in the format [major].[minor].[point]
 * Example:
 *   1) Before the build the AndroidManfist.xml has versionName=1.3.6
 *   2) TheAndroidManifest.xml will be modified so that versionName=1.3.7
 */

task incrementVersionName << {
    println(":incrementVersionName - Incrementing Version Name...")
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def mVersionName = majorVersion + "." + minorVersion + "." + pointVersion
    def mNextVersionName = majorVersion + "." + minorVersion + "." + (pointVersion + 1)
    def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
    println(":incrementVersionName - current versionName=" + mVersionName);
    println(":incrementVersionName - new versionName=" + mNextVersionName);
    manifestFile.write(manifestContent)
}

task release << {
    println(":release - Build and Version Increment")
}

task debug << {
    println(":debug - Build")
}

incrementVersionName.mustRunAfter build
incrementVersionCode.mustRunAfter build

debug.dependsOn assembleDebug
// Uncomment if you want to increment the versionCode and/or versionName when using the debug build
//debug.dependsOn incrementVersionCode
//debug.dependsOn incrementVersionName

release.dependsOn assembleRelease
release.dependsOn incrementVersionCode
release.dependsOn incrementVersionName